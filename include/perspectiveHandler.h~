#ifndef __PERSPECTIVEHANDLER_H__
#define __PERSPECTIVEHANDLER_H__
#define GL_GLEXT_PROTOTYPES 1
#define GL3_PROTOTYPES 1
#include <GL/glew.h>
#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
#include <GL/glx.h>
#include <GL/glext.h>

#include <iostream>
#include <vector>
#include <cstdio>
#include <cstdlib>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtx/transform.hpp>

#include "data.h"

class PerspectiveHandler {
  Data &d;
  glm::vec3 cameraLoc, lookingAt, up;
  glm::mat4 projection, view, model, MVP;
  LightHandler() :
    d(Data::getInstance()),
    cameraLoc(0, 4, -3),
    lookingAt(0, 0, 0),
    up(0, 1, 0),
    projection(glm::perspective(45.0f,
				d.getXmlFloat("window/width")/
				d.getXmlFloat("window/height"),
				.1f,
				100.0f)),
    view(glm::lookAt(cameraLoc, lookingAt, up)),
    model(glm::mat4(1.0f))

  {}
public:
  static PerspectiveHandler & getInstance() {
    static PerspectiveHandler instance; return instance;
  }
  glm::vec3 getMVP() const { return position; }
  glm::vec3 getDirection() const { return direction; }
};

#endif
